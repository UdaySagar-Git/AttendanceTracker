// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  user
  admin
  owner
  disabled
  deleted
}

model User {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  name             String?
  username         String?
  email            String?   @unique
  emailVerified    DateTime?
  image            String?   @default("https://www.mediopinions.com/cmsadmin/image/1643299956_avatar-1.jpg")
  password         String?
  role             Role?     @default(user)
  organisation     String?   @default("Personal")

  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  classesData      Json      @default("{ \"Mon\": \"6\" , \"Tue\": \"6\" , \"Wed\": \"6\" , \"Thu\": \"6\" , \"Fri\": \"6\" , \"Sat\": \"6\" , \"Sun\": \"0\" }")
  isNew            Boolean   @default(true)
  isBeta           Boolean   @default(false)
  semEndDate       String?
  publicHolidays   Json[]    @default([])
  holidays         Json[]    @default([])
  account          Account[]
}

// model Holiday {
//   id     String   @id @default(auto()) @map("_id") @db.ObjectId
//   userId String?  @unique @db.ObjectId
//   Date   String[]
//   title  String?
//   User   User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
// }

model DeletedUsers {
  id               String    @id @default(auto()) @map("_id") @db.ObjectId
  userId           String?
  name             String?
  username         String?
  email            String?
  emailVerified    DateTime?
  image            String?
  password         String?
  role             Role?
  organisation     String?
  createdAt        DateTime?
  updatedAt        DateTime?
  classesData      Json?
  isNew            Boolean?
  account          Account[]
  deletedAt        DateTime  @default(now())
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  token_type        String?
  refresh_token     String? @db.String
  access_token      String? @db.String
  id_token          String? @db.String
  scope             String?
  session_state     String?
  expires_at        Int?

  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  DeletedUsers   DeletedUsers? @relation(fields: [deletedUsersId], references: [id])
  deletedUsersId String?       @db.ObjectId

  @@unique([provider, providerAccountId])
}

// model Session {
//   id             String        @id @default(auto()) @map("_id") @db.ObjectId
//   sessionToken   String        @unique
//   userId         String        @db.ObjectId
//   expires        DateTime
//   user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)
//   DeletedUsers   DeletedUsers? @relation(fields: [deletedUsersId], references: [id])
//   deletedUsersId String?       @db.ObjectId
// }

// model VerificationRequest {
//   id         String   @id @default(auto()) @map("_id") @db.ObjectId
//   identifier String
//   token      String   @unique
//   expires    DateTime
//   createdAt  DateTime @default(now())
//   updatedAt  DateTime @updatedAt

//   @@unique([identifier, token])
// }